# -*- coding: utf-8 -*-
"""Final Project DS33B_Mohammad Thoby Hakim.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cInrdVAeO6s-JsSM8EiEmXdTLSoF5T6w

# Import Library & Dataset
"""

# import library
import pandas as pd
import numpy as np
from datetime import datetime
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

from google.colab import drive
drive.mount('/content/drive')

# Load data
df = pd.read_csv('/content/drive/MyDrive/dibimbing/Supermart Grocery Sales.csv')

"""# Data Understanding"""

df.head ()

df.shape

df.info()

df.describe()

"""# Data Preprocessing"""

# Check for duplicate
num_duplicate = df.duplicated().sum()

print(f"Number of duplicate rows: {num_duplicate}")

if num_duplicate > 0:
    print("\nDisplaying the first 5 duplicate:")
    display(df[df.duplicated()].head())
else:
    print("\nNo duplicate rows found.")

# Missing Values
df.isnull().sum() / df.shape[0] * 100

# check Outliers
numerical_cols = ['Sales', 'Discount', 'Profit']

plt.figure(figsize=(15, 5))
for i, col in enumerate(numerical_cols):
    plt.subplot(1, 3, i + 1)
    sns.boxplot(data=df, y=col)
    plt.title(f'Box Plot of {col}')
plt.tight_layout()
plt.show()

"""## Data Cleaning"""

# Handle outliers in the 'Profit'
profit_95th_percentile = df['Profit'].quantile(0.95)
df['Profit'] = np.where(df['Profit'] > profit_95th_percentile, profit_95th_percentile, df['Profit'])

print(f"Outliers in 'Profit' capped at the 95th percentile: {profit_95th_percentile:.2f}")

# Verify the change by re-plotting the box plot for 'Profit'
plt.figure(figsize=(5, 5))
sns.boxplot(data=df, y='Profit')
plt.title('Box Plot of Profit After Capping Outliers')
plt.show()

"""## Data Manipulation"""

# Convert 'Order Date' to datetime
df['Order Date'] = pd.to_datetime(df['Order Date'], format='mixed', dayfirst=False)

# Display the dataframe
display(df.head())

# Calculate the total number of orders per customer
total_orders_by_customer = df.groupby('Customer Name')['Order ID'].nunique().reset_index()
total_orders_by_customer.rename(columns={'Order ID': 'total_orders'}, inplace=True)

# Display the result
display(total_orders_by_customer.head())

"""# EDA"""

# Eksplorasi distribusi variabel kategorikal ('Category', 'Sub Category', 'City', 'Region', 'State').
categorical_cols = ['Category', 'Sub Category', 'City', 'Region', 'State']

for col in categorical_cols:
    print(f"Value counts for '{col}':")
    display(df[col].value_counts())
    print("\n")

    plt.figure(figsize=(10, 6))
    sns.countplot(data=df, y=col, order=df[col].value_counts().index, palette='viridis')
    plt.title(f'Distribution of {col}')
    plt.xlabel('Count')
    plt.ylabel(col)
    plt.show()

# Eksplorasi distribusi variabel kategorikal ('Category', 'Sub Category', 'City', 'Region', 'State').
categorical_cols = ['Category', 'Sub Category', 'City']

for col in categorical_cols:
    print(f"Top 5 value counts for '{col}':")
    top_5_values = df[col].value_counts().head(5)
    display(top_5_values)
    print("\n")

    plt.figure(figsize=(10, 6))
    sns.barplot(x=top_5_values.values, y=top_5_values.index, palette='viridis')
    plt.title(f'Top 5 Distribution of {col}')
    plt.xlabel('Count')
    plt.ylabel(col)
    plt.show()

numerical_cols = ['Sales', 'Discount', 'Profit']
numerical_df = df[numerical_cols]

# Histograms
plt.figure(figsize=(15, 5))
for i, col in enumerate(numerical_cols):
    plt.subplot(1, 3, i + 1)
    sns.histplot(data=numerical_df, x=col, kde=True, bins=30)
    plt.title(f'Distribution of {col}')
plt.tight_layout()
plt.show()

# Box plots
plt.figure(figsize=(15, 5))
for i, col in enumerate(numerical_cols):
    plt.subplot(1, 3, i + 1)
    sns.boxplot(data=numerical_df, y=col)
    plt.title(f'Box Plot of {col}')
plt.tight_layout()
plt.show()

import matplotlib.colors as mcolors

# Correlation matrix
correlation_matrix = numerical_df.corr()
display(correlation_matrix)

# colormap
colors = ["red", "white", "blue"]
custom_cmap = mcolors.LinearSegmentedColormap.from_list("my_cmap", colors)

# Heatmap of the correlation matrix
plt.figure(figsize=(8, 6))
sns.heatmap(correlation_matrix, annot=True, cmap=custom_cmap, fmt=".2f",
            vmin=-1, vmax=1)
plt.title('Correlation Matrix of Numerical Variables')
plt.show()

# Scatter plots
sns.pairplot(numerical_df)
plt.suptitle('Scatter Plots of Numerical Variables', y=1.02)
plt.show()

num_unique_order_id = df['Order ID'].nunique()
num_unique_customer_name = df['Customer Name'].nunique()
total_rows = df.shape[0]

print(f"Number of unique Order IDs: {num_unique_order_id}")
print(f"Number of unique Customer Names: {num_unique_customer_name}")
print(f"Total number of rows: {total_rows}")

if num_unique_order_id == total_rows:
    print("Each row represents a unique order (Order ID is a unique identifier).")
else:
    print("Order ID is not a unique identifier for each row.")

if num_unique_customer_name < total_rows:
    print("There are fewer unique customer names than total rows, indicating repeat customers.")
else:
    print("The number of unique customer names is equal to the total rows, indicating each row is a unique customer (unlikely).")

# Aggregate sales and profit by Category and Sub Category
agg_df = df.groupby(['Category'])[['Sales', 'Profit']].sum().reset_index()

# Display the aggregated data
display(agg_df)

# Sort by profit to find low and high profit categories
high_profit = agg_df.sort_values(by='Profit', ascending=False)

print("\Profit Categories:")
display(high_profit)

# Get profit categories
top_3_high_profit = agg_df.sort_values(by='Profit', ascending=False)

# Plot the top 3 high profit categories
plt.figure(figsize=(10, 6))
sns.barplot(data=top_3_high_profit, x='Profit', y='Category', palette='viridis')
plt.title('Profit Categories')
plt.xlabel('Total Profit')
plt.ylabel('Category')
plt.show()

# Aggregate data by Category to get total Discount and Profit per Category
category_agg_df = df.groupby('Category')[['Discount', 'Profit']].sum().reset_index()

# Create a scatter plot of Discount vs Profit per Category
plt.figure(figsize=(10, 6))
sns.scatterplot(data=category_agg_df, x='Discount', y='Profit', hue='Category', s=100)
plt.title('Discount vs Profit per Category')
plt.xlabel('Total Discount')
plt.ylabel('Total Profit')
plt.grid(True)

# Add labels for each point
for i in range(len(category_agg_df)):
    plt.text(category_agg_df['Discount'][i], category_agg_df['Profit'][i], category_agg_df['Category'][i], fontsize=9)

plt.show()

# Aggregate data by Category to get total Sales and Profit per Category
category_agg_df = df.groupby('Category')[['Sales', 'Profit']].sum().reset_index()

# Create a scatter plot of Sales vs Profit per Category
plt.figure(figsize=(10, 6))
sns.scatterplot(data=category_agg_df, x='Sales', y='Profit', hue='Category', s=100)
plt.title('Sales vs Profit per Category')
plt.xlabel('Total Sales')
plt.ylabel('Total Profit')
plt.grid(True)

# Add labels for each point
for i in range(len(category_agg_df)):
    plt.text(category_agg_df['Sales'][i], category_agg_df['Profit'][i], category_agg_df['Category'][i], fontsize=9)

plt.show()

# Extract the year from 'Order Date'
df['Year'] = df['Order Date'].dt.year

# Aggregate data by year to find total sales, number of customers, and number of transactions
yearly_agg = df.groupby('Year').agg(
    Total_Sales=('Sales', 'sum'),
    Number_of_Customers=('Customer Name', 'nunique'),
    Number_of_Transactions=('Order ID', 'nunique')
).reset_index()

# Sort by Total Sales and display top years
print("Years with Highest Total Sales:")
display(yearly_agg.sort_values(by='Total_Sales', ascending=False).head())

# Sort by Number of Customers and display top years
print("\nYears with Most Purchases by Consumers:")
display(yearly_agg.sort_values(by='Number_of_Customers', ascending=False).head())

# Sort by Number of Transactions and display top years
print("\nYears with Highest Number of Transactions:")
display(yearly_agg.sort_values(by='Number_of_Transactions', ascending=False).head())

# Plot Total Sales by Year
plt.figure(figsize=(10, 6))
sns.barplot(data=yearly_agg, x='Year', y='Total_Sales', palette='viridis')
plt.title('Total Sales by Year')
plt.xlabel('Year')
plt.ylabel('Total Sales')
plt.show()


# Plot Number of Transactions by Year
plt.figure(figsize=(10, 6))
sns.barplot(data=yearly_agg, x='Year', y='Number_of_Transactions', palette='viridis')
plt.title('Number of Transactions by Year')
plt.xlabel('Year')
plt.ylabel('Number of Transactions')
plt.show()

# Extract month and year from 'Order Date'
df['Month'] = df['Order Date'].dt.month

# Aggregate data by year and month
monthly_agg = df.groupby(['Year', 'Month']).agg(
    Total_Sales=('Sales', 'sum'),
    Number_of_Customers=('Customer Name', 'nunique'),
    Number_of_Transactions=('Order ID', 'nunique')
).reset_index()

# Find the month with the highest total sales for each year
print("Month with Highest Total Sales for Each Year:")
display(monthly_agg.loc[monthly_agg.groupby('Year')['Total_Sales'].idxmax()])

# Find the month with the highest number of customers for each year
print("\nMonth with Highest Number of Customers for Each Year:")
display(monthly_agg.loc[monthly_agg.groupby('Year')['Number_of_Customers'].idxmax()])

# Find the month with the highest number of transactions for each year
print("\nMonth with Highest Number of Transactions for Each Year:")
display(monthly_agg.loc[monthly_agg.groupby('Year')['Number_of_Transactions'].idxmax()])

# Plot Total Sales by Month
plt.figure(figsize=(10, 6))
sns.barplot(data=monthly_agg, x='Month', y='Total_Sales', palette='viridis')
plt.title('Total Sales by Month')
plt.xlabel('Month')
plt.ylabel('Total Sales')
plt.show()


# Plot Number of Transactions by Month
plt.figure(figsize=(10, 6))
sns.barplot(data=monthly_agg, x='Month', y='Number_of_Transactions', palette='viridis')
plt.title('Number of Transactions by Month')
plt.xlabel('Month')
plt.ylabel('Number of Transactions')
plt.show()

"""# Modelling

## Aggregate data by customer
"""

customer_agg_df = df.groupby('Customer Name').agg(
    total_sales=('Sales', 'sum'),
    total_orders=('Order ID', 'nunique')
).reset_index()

display(customer_agg_df.head())

"""## Prepare data for modeling

"""

features = customer_agg_df[['total_sales', 'total_orders']]

scaler = StandardScaler()
scaled_features = scaler.fit_transform(features)

# Display the first few rows of the scaled features
print("Scaled Features (first 5 rows):")
display(scaled_features[:5])

"""## Apply ML model"""

# Determine the optimal number of clusters using the elbow method and silhouette score
inertia = []
silhouette_scores = []
k_range = range(2, 11)

for k in k_range:
    kmeans = KMeans(n_clusters=k, random_state=42, n_init=10) # Added n_init explicitly
    kmeans.fit(scaled_features)
    inertia.append(kmeans.inertia_)
    silhouette_scores.append(silhouette_score(scaled_features, kmeans.labels_))

# Plot the elbow method graph
plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.plot(k_range, inertia, marker='o')
plt.title('Elbow Method for Optimal K')
plt.xlabel('Number of Clusters (K)')
plt.ylabel('Inertia')
plt.grid(True)

# Plot the silhouette scores
plt.subplot(1, 2, 2)
plt.plot(k_range, silhouette_scores, marker='o')
plt.title('Silhouette Scores for Optimal K')
plt.xlabel('Number of Clusters (K)')
plt.ylabel('Silhouette Score')
plt.grid(True)

plt.tight_layout()
plt.show()

"""Based on the elbow method and silhouette score plots, the optimal number of clusters appears to be 3.


"""

# Determine the optimal number of clusters (visually from the plots)
optimal_k = 3

# Instantiate KMeans with the optimal number of clusters
kmeans_optimal = KMeans(n_clusters=optimal_k, random_state=42, n_init=10) # Added n_init explicitly

# Fit the model to the scaled features
kmeans_optimal.fit(scaled_features)

# Add the cluster labels to the customer_agg_df
customer_agg_df['cluster'] = kmeans_optimal.labels_

# Display the first few rows of the dataframe with cluster labels
display(customer_agg_df.head())

"""## Evaluate model

"""

# Calculate the silhouette score
silhouette_avg = silhouette_score(scaled_features, customer_agg_df['cluster'])
print(f"Silhouette Score: {silhouette_avg:.2f}")

# Visualize the clusters
plt.figure(figsize=(10, 6))
sns.scatterplot(data=customer_agg_df, x='total_sales', y='total_orders', hue='cluster', palette='viridis', s=100)
plt.title('Customer Clusters based on Total Sales and Total Orders')
plt.xlabel('Total Sales')
plt.ylabel('Total Orders')
plt.grid(True)
plt.legend(title='Cluster')
plt.show()

# Group by cluster and calculate the required metrics
cluster_analysis = customer_agg_df.groupby('cluster').agg(
    Avg_Total_Sales=('total_sales', 'mean'),
    Avg_Total_Orders=('total_orders', 'mean'),
    Num_Customers=('Customer Name', 'count')
).reset_index()

# Display the cluster summary
display(cluster_analysis)

# Print the cluster analysis again for summarizing
print("Summary of each customer cluster:")
display(cluster_analysis)

print("\nCluster 1: Lower Sales/Orders")
print(f"- Average Total Sales: {cluster_analysis.loc[1, 'Avg_Total_Sales']:.2f}")
print(f"- Average Total Orders: {cluster_analysis.loc[1, 'Avg_Total_Orders']:.2f}")
print(f"- Number of Customers: {cluster_analysis.loc[1, 'Num_Customers']}")

print("\nCluster 0: Middle Sales/Orders")
print(f"- Average Total Sales: {cluster_analysis.loc[0, 'Avg_Total_Sales']:.2f}")
print(f"- Average Total Orders: {cluster_analysis.loc[0, 'Avg_Total_Orders']:.2f}")
print(f"- Number of Customers: {cluster_analysis.loc[0, 'Num_Customers']}")

print("\nCluster 2: Higher Sales/Orders")
print(f"- Average Total Sales: {cluster_analysis.loc[2, 'Avg_Total_Sales']:.2f}")
print(f"- Average Total Orders: {cluster_analysis.loc[2, 'Avg_Total_Orders']:.2f}")
print(f"- Number of Customers: {cluster_analysis.loc[2, 'Num_Customers']}")

"""# Summary

Kluster 1: Pelanggan dengan Pembelian Rendah :

*   Strategi Up-selling dan Cross-selling
*   Promosikan produk yang populer dan terlaris untuk mendorong pembelian.
*   Program Loyalitas atau Diskon Khusus seperti insentif sederhana seperti diskon 10% atau pengiriman gratis.

Kluster 0: Pelanggan dengan Pembelian Biasa :
*   Kirimkan rekomendasi produk yang dipersonalisasi berdasarkan riwayat pembelian mereka
*   Tawarkan promosi upgrade (misalnya, diskon untuk produk premium atau bundling)
*   Berikan insentif untuk pembelian berikutnya (misalnya, kupon setelah mereka mencapai batas pengeluaran tertentu)

Kluster 2: Pelanggan dengan Pembelian Tinggi
*   Program VIP atau Rewards
*   Berikan akses awal ke produk atau penawaran baru sebelum pelanggan lain
*   Meminta Ulasan dan Masukan,  Ajak mereka untuk memberikan ulasan atau masukan produk.
"""

